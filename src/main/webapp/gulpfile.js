/*eslint no-undef: "error"*/
/*eslint-env node*/
/*eslint angular/typecheck-object: 0*/

var gulp = require('gulp');
var $ = require('gulp-load-plugins')({
    lazy: true
});
var config = require('./gulp.config')();
var wiredep = require('wiredep').stream;
var angularFileSort = require('gulp-angular-filesort');
var del = require('del');

gulp.task('help', $.taskListing);

gulp.task('default', ['help'], function () {
    log('**************************************************');
    log('**************GULP TASK DESCRIPOTION**************');
    log('**************************************************');
    log('***** wiredep - wire all bower js and css    *****');
    log('***** css - inject custom css                *****');
    log('***** lint - check js code for errors        *****');
    log('**************************************************');
});

gulp.task('dev-wiredep', ['css'], function () {
    log('Wire up the bower css and js...');
    var options = config.getWiredepDefaultOptions();

    return gulp
        .src(config.index)
        .pipe(wiredep(options))
        .pipe($.inject(gulp.src(config.js).pipe(angularFileSort())))
        .pipe(gulp.dest(config.public));
});

gulp.task('wiredep', ['templateCache'], function () {
    log('Wire up the bower css and js...');
    var options = config.getWiredepDefaultOptions();

    return gulp
        .src(config.index)
        .pipe(wiredep(options))
        .pipe($.inject(gulp.src(config.js).pipe(angularFileSort())))
        .pipe(gulp.dest(config.public));
});

gulp.task('build', ['wiredep'], function () {
    log('Preparing the js, css and html for build...');

    var assets = $.useref.assets({
        searchPath: './'
    });
    var cssFilter = $.filter('**/*.css', {
        restore: true
    });
    var jsFilter = $.filter('**/*.js', {
        restore: true
    });

    gulp
        .src(config.index)
        .pipe($.plumber())
        .pipe(assets)
        .pipe(cssFilter)
        .pipe($.csso())
        .pipe(cssFilter.restore)
        .pipe(jsFilter)
        //.pipe($.uglify())
        .pipe(jsFilter.restore)
        .pipe(assets.restore())
        .pipe($.useref())
        .pipe(gulp.dest(config.build));

    return del(config.index);
});

gulp.task('dev-build', ['dev-wiredep'], function () {
    log('Preparing the js, css and html for build...');

    // var assets = $.useref.assets({
    //     searchPath: './'
    // });
    // var cssFilter = $.filter('**/*.css', {
    //     restore: true
    // });
    // var jsFilter = $.filter('**/*.js', {
    //     restore: true
    // });

    // return gulp
    //     .src(config.index)
    //     .pipe($.plumber())
    //     .pipe(assets)
    //     .pipe(cssFilter)
    //     .pipe($.csso())
    //     .pipe(cssFilter.restore)
    //     .pipe(jsFilter)
    //     .pipe($.uglify())
    //     .pipe(jsFilter.restore)
    //     .pipe(assets.restore())
    //     .pipe($.useref())
    //     .pipe(gulp.dest(config.build));
});

gulp.task('css', ['img'], function () {
    log('Inject custom css...');

    return gulp
        .src(config.template)
        .pipe($.inject(gulp.src(config.css)))
        .pipe(gulp.dest(config.public));
});

gulp.task('img', ['clean'], function () {
    log('Copying img to build folder...');

    return gulp.src('./resources/img/*.*').pipe(gulp.dest(config.build + 'img/'));
});

gulp.task('templateCache', ['css'], function () {
    log('Creating Angular templateCache...');

    return gulp.src(config.htmlTemplates)
        .pipe($.minifyHtml({
            empty: true
        }))
        .pipe($.angularTemplatecache(config.templateCache.file, config.templateCache.options))
        .pipe(gulp.dest(config.components));
});

gulp.task('clean', function () {
    log('Cleaning autogenerated files...');

    return del(config.clean, {
        force: true
    });

});

gulp.task('lint', function () {
    log('Linting js code...');

    return gulp.src(['resources/components/**/*.js'])
        .pipe($.eslint())
        .pipe($.eslint.format('table'))
        .pipe($.eslint.failAfterError());
});


///////////////////////////////////////////////////////////////////////////////


function log(msg) {
    if (typeof (msg) === 'object') {
        for (var item in msg) {
            if (msg.hasOwnProperty(item)) {
                $.util.log($.util.colors.green(msg[item]));
            }
        }
    } else {
        $.util.log($.util.colors.green(msg));
    }
}